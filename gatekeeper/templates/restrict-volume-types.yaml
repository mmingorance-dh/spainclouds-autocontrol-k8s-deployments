apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: restrictvolumetypes
spec:
  crd:
    spec:
      names:
        kind: RestrictVolumeTypes
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            volumes:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package restrictvolumetypes

        violation[{"msg": msg, "details": {"pod_forbidden_volume_type": objectName}}] {
          objectName := input.review.object.metadata.name
          objectKind := input.review.kind.kind
          volume_fields := {x | input.review.object.spec.volumes[_][x]; x != "name"}
          not input_volume_type_allowed(volume_fields)
          msg := sprintf("%v/%v - One of the volume types %v is not allowed - Pod: %v. Allowed volume types: %v", [objectKind, objectName, volume_fields, objectName, input.parameters.volumes])
        }

        violation[{"msg": msg, "details": {"deploy_forbidden_volume_type": objectName}}] {
          objectName := input.review.object.metadata.name
          objectKind := input.review.kind.kind
          volume_fields := {x | input.review.object.spec.template.spec.volumes[_][x]; x != "name"}
          not input_volume_type_allowed(volume_fields)
          msg := sprintf("%v/%v - One of the volume types %v is not allowed - Pod: %v. Allowed volume types: %v", [objectKind, objectName, volume_fields, objectName, input.parameters.volumes])
        }

        # * may be used to allow all volume types
        input_volume_type_allowed(volume_fields) {
          input.parameters.volumes[_] == "*"
        }

        input_volume_type_allowed(volume_fields) {
          allowed_set := {x | x = input.parameters.volumes[_]}
          test := volume_fields - allowed_set
          count(test) == 0
        }
